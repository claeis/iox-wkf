plugins {
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
}

group 'ch.interlis'
version '1.1.0'+System.getProperty('release','-SNAPSHOT')

apply plugin: "java"
apply plugin: "maven"

configurations {
    deployerJars
}

// to get the latest SNAPSHOT uncomment the following lines
//configurations.all {
//    // check for updates every build
//    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//}

sourceCompatibility = JavaVersion.VERSION_1_8 
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

dependencies {
    compile(group: 'org.geotools', name: 'gt-shapefile', version: '23.1') 
    compile group: 'org.locationtech.jts', name: 'jts-io', version: '1.16.1', ext: 'pom'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    compile group: 'ch.interlis', name: 'iox-ili', version: '1.20.7'
    compile group: 'ch.interlis', name: 'ili2c-tool', version: '5.0.6'
    compile group: 'net.iharder', name: 'base64', version: '2.3.9'
    runtime group: 'org.xerial', name: 'sqlite-jdbc', version: '3.21.0.1'
    runtime group: 'org.geotools', name: 'gt-epsg-hsql', version: '23.1'
    testCompile group: 'org.postgresql', name: 'postgresql', version: '42.2.13'
    compile(group: 'ch.interlis', name: 'ili2pg', version:'4.4.1') {
        exclude group: 'ch.interlis', module: 'iox-ili'
    }
    compile (group: 'ch.interlis', name: 'ili2gpkg', version: '4.4.1') {
        exclude group: 'ch.interlis', module: 'iox-ili'
    }
    deployerJars "org.apache.maven.wagon:wagon-ftp:3.0.0"
    
    testCompile group: 'org.testcontainers', name: 'testcontainers', version: '1.14.3'
    testCompile group: 'org.testcontainers', name: 'postgresql', version: '1.14.3'
}

repositories {
    mavenLocal()
    maven {
        url "http://jars.interlis.ch"
    }
    maven { 
        url "https://repo.osgeo.org/repository/release/" 
    }
    maven {
        url "http://maven.geo-solutions.it"
    }
    mavenCentral()
}

Properties properties = new Properties()
File propFile=project.rootProject.file('user.properties')
if(propFile.exists()){
    properties.load(propFile.newDataInputStream())
}
def git = System.getProperty('git',properties.get('git','git'))
def repos_pwd = System.getProperty('repos_pwd',properties.get('repos_pwd','repos_pwd'))
def repos_usr = System.getProperty('repos_usr',properties.get('repos_usr','repos_usr'))
    
def generatedResources = "$buildDir/generated-resources/main"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine git, 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

sourceSets {
  main {
    //let's register an output folder on the main SourceSet:
    output.dir(generatedResources, builtBy: 'generateMyResources')
    //it is now a part of the 'main' classpath and will be a part of the jar
  }
    test {
        resources {
            srcDirs = ['test/data']
        }
    }
}

task generateMyResources {
    doLast {
        def versionProps = new Properties()
        versionProps.setProperty('version', "$project.version")
        versionProps.setProperty('versionCommit', getGitHash())
        def versionPropsFile = new File(generatedResources,"ch/interlis/ioxwkf/Version.properties")
        versionPropsFile.getParentFile().mkdirs();
        versionProps.store(versionPropsFile.newWriter(), null);
    }
}

test {
    testLogging.exceptionFormat = 'full'
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: 'ftp://ftp.interlis.ch'){
                authentication(userName: repos_usr, password: repos_pwd)
            }
        }
    }
}


// TEMPORARY
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def githubRepoUrl = "https://github.com/edigonzales/iox-wkf"
def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "https://github.com/edigonzales/iox-wkf/blob/master/LICENSE"
        }
    }
    developers {
        developer {
            id "edigonzales"
            name "Stefan Ziegler"
            email "stefan.ziegler@bd.so.ch"
        }
    }

    scm {
        url githubRepoUrl
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId project.group
            artifactId 'iox-wkf'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'iox-wkf')
                root.appendNode('name', 'iox-wkf')
                root.appendNode('url', githubRepoUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.env.bintrayUser
    key = System.env.bintrayKey
    publications = ['mavenPublication']
    publish = true
    
    pkg {
        repo = 'iox-wkf'
        name = 'iox-wkf'
        userOrg = 'sogis'
        licenses = ['MIT']
        labels = ['Shapefile', 'GeoPackage']        
        vcsUrl = githubRepoUrl
        version {
            name = project.version
            desc = project.version
            released  = new Date()
        }
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}